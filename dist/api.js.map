{"version":3,"file":"api.js","sourceRoot":"","sources":["../src/api.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * API Pagos Instantáneos\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v3.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';\n\n/**\n * \n * @export\n * @interface BankGetBanks\n */\nexport interface BankGetBanks {\n    /**\n     * Arreglo con listado de bancos.\n     * @type {Array<BankGetBanksBanksInner>}\n     * @memberof BankGetBanks\n     */\n    'banks': Array<BankGetBanksBanksInner>;\n}\n/**\n * Datos de banco.\n * @export\n * @interface BankGetBanksBanksInner\n */\nexport interface BankGetBanksBanksInner {\n    /**\n     * Identificador del banco.\n     * @type {string}\n     * @memberof BankGetBanksBanksInner\n     */\n    'bank_id': string;\n    /**\n     * Nombre del banco.\n     * @type {string}\n     * @memberof BankGetBanksBanksInner\n     */\n    'name': string;\n    /**\n     * Mensaje con particularidades del banco.\n     * @type {string}\n     * @memberof BankGetBanksBanksInner\n     */\n    'message': string;\n    /**\n     * Monto mínimo que acepta el banco en un pago.\n     * @type {number}\n     * @memberof BankGetBanksBanksInner\n     */\n    'min_amount': number;\n    /**\n     * Tipo de banco.\n     * @type {string}\n     * @memberof BankGetBanksBanksInner\n     */\n    'type': BankGetBanksBanksInnerTypeEnum;\n    /**\n     * Identificador del banco padre (si un banco tiene banca personas y empresas, el primero será el padre del segundo).\n     * @type {string}\n     * @memberof BankGetBanksBanksInner\n     */\n    'parent': string;\n    /**\n     * URL del logo del banco.\n     * @type {string}\n     * @memberof BankGetBanksBanksInner\n     */\n    'logo_url'?: string;\n}\n\nexport const BankGetBanksBanksInnerTypeEnum = {\n    Persona: 'Persona',\n    Empresa: 'Empresa'\n} as const;\n\nexport type BankGetBanksBanksInnerTypeEnum = typeof BankGetBanksBanksInnerTypeEnum[keyof typeof BankGetBanksBanksInnerTypeEnum];\n\n/**\n * \n * @export\n * @interface MerchantGetPaymentMethods\n */\nexport interface MerchantGetPaymentMethods {\n    /**\n     * Arreglo con métodos de pago disponibles.\n     * @type {Array<MerchantGetPaymentMethodsPaymentMethodsInner>}\n     * @memberof MerchantGetPaymentMethods\n     */\n    'paymentMethods': Array<MerchantGetPaymentMethodsPaymentMethodsInner>;\n}\n/**\n * Método de pago.\n * @export\n * @interface MerchantGetPaymentMethodsPaymentMethodsInner\n */\nexport interface MerchantGetPaymentMethodsPaymentMethodsInner {\n    /**\n     * Identificador del medio de pago.\n     * @type {string}\n     * @memberof MerchantGetPaymentMethodsPaymentMethodsInner\n     */\n    'id': string;\n    /**\n     * Nombre del medio de pago.\n     * @type {string}\n     * @memberof MerchantGetPaymentMethodsPaymentMethodsInner\n     */\n    'name': string;\n    /**\n     * URL del logo sugerido para mostrar.\n     * @type {string}\n     * @memberof MerchantGetPaymentMethodsPaymentMethodsInner\n     */\n    'logo_url': string;\n}\n/**\n * Información completa del pago. Datos con los que fue creado y el estado actual del pago.\n * @export\n * @interface PaymentGetPayment\n */\nexport interface PaymentGetPayment {\n    /**\n     * Identificador único del pago, es una cadena alfanumérica de 12 caracteres. Como este identificador es único, se puede usar, por ejemplo, para evitar procesar una notificación repetida. (Khipu espera un código 200 al notificar un pago, si esto no ocurre se reintenta hasta por dos días).\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'payment_id': string;\n    /**\n     * URL principal del pago, si el usuario no ha elegido previamente un método de pago se le muestran las opciones.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'payment_url': string;\n    /**\n     * URL de pago simplificado.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'simplified_transfer_url': string;\n    /**\n     * URL de pago normal.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'transfer_url': string;\n    /**\n     * URL para invocar el pago desde un dispositivo móvil usando la APP de Khipu.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'app_url': string;\n    /**\n     * Es `true` si el pago ya cuenta con todos los datos necesarios para abrir directamente la aplicación de pagos Khipu.\n     * @type {boolean}\n     * @memberof PaymentGetPayment\n     */\n    'ready_for_terminal': boolean;\n    /**\n     * Cadena de caracteres alfanuméricos que identifican unicamente al pago, es el identificador que el servidor de Khipu enviará al servidor del comercio cuando notifique que un pago está conciliado.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'notification_token': string;\n    /**\n     * Identificador único de una cuenta de cobro.\n     * @type {number}\n     * @memberof PaymentGetPayment\n     */\n    'receiver_id': number;\n    /**\n     * Fecha y hora de conciliación del pago. Formato ISO-8601.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'conciliation_date': string;\n    /**\n     * Motivo del pago.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'subject': string;\n    /**\n     * El monto del cobro.\n     * @type {number}\n     * @memberof PaymentGetPayment\n     */\n    'amount': number;\n    /**\n     * El código de moneda en formato ISO-4217.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'currency': string;\n    /**\n     * Estado del pago, puede ser `pending` (el pagador aún no comienza a pagar), `verifying` (se está verificando el pago) o `done`, cuando el pago ya está confirmado.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'status': PaymentGetPaymentStatusEnum;\n    /**\n     * Detalle del estado del pago: `pending` (el pagador aún no comienza a pagar), `normal` (el pago fue verificado y fue cancelado por algún medio de pago estándar), `marked-paid-by-receiver` (el cobrador marcó el cobro como pagado por otro medio), `rejected-by-payer` (el pagador declaró que no pagará), `marked-as-abuse` (el pagador declaró que no pagará y que el cobro fue no solicitado), y `reversed` (el pago fue anulado por el comercio, el dinero fue devuelto al pagador).\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'status_detail': PaymentGetPaymentStatusDetailEnum;\n    /**\n     * Detalle del cobro.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'body': string;\n    /**\n     * URL con imagen del cobro.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'picture_url': string;\n    /**\n     * URL del comprobante de pago.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'receipt_url': string;\n    /**\n     * URL donde se redirige al pagador luego que termina el pago.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'return_url': string;\n    /**\n     * URL donde se redirige al pagador luego de que desiste hacer el pago.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'cancel_url': string;\n    /**\n     * URL del webservice donde se notificará el pago.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'notify_url': string;\n    /**\n     * Versión de la API de notificación.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'notify_api_version': string;\n    /**\n     * Fecha máxima para ejecutar el pago (en formato ISO-8601). El cliente podrá realizar varios intentos de pago hasta dicha fecha. Cada intento tiene un plazo individual de 3 horas para su ejecución.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'expires_date': string;\n    /**\n     * Arreglo de URLs de archivos adjuntos al pago.\n     * @type {Array<string>}\n     * @memberof PaymentGetPayment\n     */\n    'attachment_urls': Array<string>;\n    /**\n     * Nombre del banco seleccionado por el pagador.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'bank': string;\n    /**\n     * Identificador del banco seleccionado por el pagador.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'bank_id': string;\n    /**\n     * Nombre del pagador.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'payer_name': string;\n    /**\n     * Correo electrónico del pagador.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'payer_email': string;\n    /**\n     * Identificador personal del pagador.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'personal_identifier': string;\n    /**\n     * Número de cuenta bancaria del pagador.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'bank_account_number': string;\n    /**\n     * Es `true` si la conciliación del pago fue hecha luego de la fecha de expiración.\n     * @type {boolean}\n     * @memberof PaymentGetPayment\n     */\n    'out_of_date_conciliation': boolean;\n    /**\n     * Identificador del pago asignado por el cobrador.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'transaction_id': string;\n    /**\n     * Campo genérico que asigna el cobrador al momento de hacer el pago.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'custom': string;\n    /**\n     * Correo electrónico de la persona responsable del pago.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'responsible_user_email': string;\n    /**\n     * Es `true` cuando este es un cobro por correo electrónico y Khipu enviará recordatorios.\n     * @type {boolean}\n     * @memberof PaymentGetPayment\n     */\n    'send_reminders': boolean;\n    /**\n     * Es `true` cuando Khipu enviará el cobro por correo electrónico.\n     * @type {boolean}\n     * @memberof PaymentGetPayment\n     */\n    'send_email': boolean;\n    /**\n     * Método de pago usado por el pagador, puede ser `regular_transfer` (transferencia normal) o `simplified_transfer` (transferencia simplificada).\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'payment_method': PaymentGetPaymentPaymentMethodEnum;\n    /**\n     * Origen de fondos usado por el pagador, puede ser `debit` para pago con débito, `prepaid` para pago con prepago, `credit` para pago con crédito, o vacío en el caso de que se haya pagado mediante transferencia bancaria.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'funds_source': PaymentGetPaymentFundsSourceEnum;\n    /**\n     * Monto a descontar del valor pagado.\n     * @type {number}\n     * @memberof PaymentGetPayment\n     */\n    'discount'?: number;\n    /**\n     * Ignorar este campo.\n     * @type {string}\n     * @memberof PaymentGetPayment\n     */\n    'third_party_authorization_details'?: string;\n}\n\nexport const PaymentGetPaymentStatusEnum = {\n    Pending: 'pending',\n    Verifying: 'verifying',\n    Done: 'done'\n} as const;\n\nexport type PaymentGetPaymentStatusEnum = typeof PaymentGetPaymentStatusEnum[keyof typeof PaymentGetPaymentStatusEnum];\nexport const PaymentGetPaymentStatusDetailEnum = {\n    Pending: 'pending',\n    Normal: 'normal',\n    MarkedPaidByReceiver: 'marked-paid-by-receiver',\n    RejectedByPayer: 'rejected-by-payer',\n    MarkedAsAbuse: 'marked-as-abuse',\n    Reversed: 'reversed'\n} as const;\n\nexport type PaymentGetPaymentStatusDetailEnum = typeof PaymentGetPaymentStatusDetailEnum[keyof typeof PaymentGetPaymentStatusDetailEnum];\nexport const PaymentGetPaymentPaymentMethodEnum = {\n    RegularTransfer: 'regular_transfer',\n    SimplifiedTransfer: 'simplified_transfer',\n    NotAvailable: 'not_available'\n} as const;\n\nexport type PaymentGetPaymentPaymentMethodEnum = typeof PaymentGetPaymentPaymentMethodEnum[keyof typeof PaymentGetPaymentPaymentMethodEnum];\nexport const PaymentGetPaymentFundsSourceEnum = {\n    Debit: 'debit',\n    Prepaid: 'prepaid',\n    Credit: 'credit',\n    NotAvailable: 'not-available',\n    Empty: ''\n} as const;\n\nexport type PaymentGetPaymentFundsSourceEnum = typeof PaymentGetPaymentFundsSourceEnum[keyof typeof PaymentGetPaymentFundsSourceEnum];\n\n/**\n * Crea un pago en Khipu y obtiene las URLs para redirección al usuario para que complete el pago.\n * @export\n * @interface PaymentPostPayment\n */\nexport interface PaymentPostPayment {\n    /**\n     * El monto del cobro. Sin separador de miles y usando \\'.\\' como separador de decimales. Hasta 4 lugares decimales, dependiendo de la moneda.\n     * @type {number}\n     * @memberof PaymentPostPayment\n     */\n    'amount': number;\n    /**\n     * El código de moneda en formato ISO-4217.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'currency': PaymentPostPaymentCurrencyEnum;\n    /**\n     * Motivo.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'subject': string;\n    /**\n     * Identificador propio de la transacción. Ej: número de factura u orden de compra.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'transaction_id'?: string;\n    /**\n     * Parámetro para enviar información personalizada de la transacción. Ej: documento XML con el detalle del carro de compra.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'custom'?: string;\n    /**\n     * Descripción del cobro.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'body'?: string;\n    /**\n     * Identificador del banco para usar en el pago.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'bank_id'?: string;\n    /**\n     * La dirección URL a donde enviar al cliente mientras el pago está siendo verificado.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'return_url'?: string;\n    /**\n     * La dirección URL a donde enviar al cliente si decide no hacer hacer la transacción.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'cancel_url'?: string;\n    /**\n     * Una dirección URL de una foto de tu producto o servicio.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'picture_url'?: string;\n    /**\n     * La dirección del web-service que utilizará khipu para notificar cuando el pago esté conciliado.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'notify_url'?: string;\n    /**\n     * La dirección URL del archivo PDF con el contrato a firmar mediante este pago. El cobrador debe estar habilitado para este servicio y el campo `fixed_payer_personal_identifier` es obligatorio.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'contract_url'?: string;\n    /**\n     * Versión de la API de notificaciones para recibir avisos por web-service.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'notify_api_version'?: string;\n    /**\n     * Fecha máxima para ejecutar el pago (en formato ISO-8601). El cliente podrá realizar varios intentos de pago hasta dicha fecha. Cada intento tiene un plazo individual de 3 horas para su ejecución.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'expires_date'?: string;\n    /**\n     * Si es `true`, se enviará una solicitud de cobro al correo especificado en `payer_email`.\n     * @type {boolean}\n     * @memberof PaymentPostPayment\n     */\n    'send_email'?: boolean;\n    /**\n     * Nombre del pagador. Es obligatorio cuando `send_email` es `true`.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'payer_name'?: string;\n    /**\n     * Correo del pagador. Es obligatorio cuando `send_email` es `true`.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'payer_email'?: string;\n    /**\n     * Si es `true`, se enviarán recordatorios de cobro.\n     * @type {boolean}\n     * @memberof PaymentPostPayment\n     */\n    'send_reminders'?: boolean;\n    /**\n     * Correo electrónico del responsable de este cobro, debe corresponder a un usuario Khipu con permisos para cobrar usando esta cuenta de cobro.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'responsible_user_email'?: string;\n    /**\n     * Identificador personal. Si se especifica, solo podrá ser pagado usando ese identificador.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'fixed_payer_personal_identifier'?: string;\n    /**\n     * Comisión para el integrador. Sólo es válido si la cuenta de cobro tiene una cuenta de integrador asociada.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'integrator_fee'?: string;\n    /**\n     * Para cuentas de cobro con más cuenta propia. Permite elegir la cuenta donde debe ocurrir la transferencia.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'collect_account_uuid'?: string;\n    /**\n     * Fecha de rendición del cobro. Es también la fecha final para poder reembolsar el cobro. Formato ISO-8601.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'confirm_timeout_date'?: string;\n    /**\n     * El cobro sólo se podrá pagar utilizando el medio de pago especificado. Los posibles valores para este campo se encuentran en el campo `id` de la respuesta del endpoint `/api/3.0/merchants/paymentMethods`.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'mandatory_payment_method'?: string;\n    /**\n     * Nombre del comercio final para quien un proveedor de servicios de pago procesa un pago. Requerido para transacciones de clientes PSP; no aplicable para otros. En caso de tratarse de un PSP de PSP, estos deben ingresarse separados por \\'->\\'.\n     * @type {string}\n     * @memberof PaymentPostPayment\n     */\n    'psp_client_merchant_name'?: string;\n}\n\nexport const PaymentPostPaymentCurrencyEnum = {\n    Clp: 'CLP',\n    Clf: 'CLF',\n    Ars: 'ARS',\n    Pen: 'PEN',\n    Mxn: 'MXN',\n    Usd: 'USD',\n    Eur: 'EUR',\n    Bob: 'BOB',\n    Cop: 'COP'\n} as const;\n\nexport type PaymentPostPaymentCurrencyEnum = typeof PaymentPostPaymentCurrencyEnum[keyof typeof PaymentPostPaymentCurrencyEnum];\n\n/**\n * Crea un pago en Khipu y obtiene las URLs para redirección al usuario para que complete el pago.\n * @export\n * @interface PaymentPostPayment2\n */\nexport interface PaymentPostPayment2 {\n    /**\n     * Identificador único del pago, es una cadena alfanumérica de 12 caracteres. Como este identificador es único, se puede usar, por ejemplo, para evitar procesar una notificación repetida. (Khipu espera un código 200 al notificar un pago, si esto no ocurre se reintenta hasta por dos días).\n     * @type {string}\n     * @memberof PaymentPostPayment2\n     */\n    'payment_id': string;\n    /**\n     * URL principal del pago, si el usuario no ha elegido previamente un método de pago se le muestran las opciones.\n     * @type {string}\n     * @memberof PaymentPostPayment2\n     */\n    'payment_url': string;\n    /**\n     * URL de pago simplificado.\n     * @type {string}\n     * @memberof PaymentPostPayment2\n     */\n    'simplified_transfer_url': string;\n    /**\n     * URL de pago normal.\n     * @type {string}\n     * @memberof PaymentPostPayment2\n     */\n    'transfer_url': string;\n    /**\n     * URL para invocar el pago desde un dispositivo móvil usando la APP de Khipu.\n     * @type {string}\n     * @memberof PaymentPostPayment2\n     */\n    'app_url': string;\n    /**\n     * Es `true` si el pago ya cuenta con todos los datos necesarios para abrir directamente la aplicación de pagos Khipu.\n     * @type {boolean}\n     * @memberof PaymentPostPayment2\n     */\n    'ready_for_terminal': boolean;\n}\n/**\n * Reembolsa total o parcialmente el monto de un pago. Esta operación solo se puede realizar en los comercios que recauden en cuenta Khipu y antes de la rendición de los fondos correspondientes.\n * @export\n * @interface PaymentPostPaymentRefunds\n */\nexport interface PaymentPostPaymentRefunds {\n    /**\n     * El monto a devolver. Sin separador de miles y usando \\'.\\' como separador de decimales. Hasta 4 lugares decimales, dependiendo de la moneda. Si se omite el reembolso se hará por el total del monto del pago.\n     * @type {number}\n     * @memberof PaymentPostPaymentRefunds\n     */\n    'amount'?: number;\n}\n/**\n * Predicción acerca del resultado de un pago, si podrá o no funcionar. Información adicional como máximo posible de transferir a un nuevo destinatario.\n * @export\n * @interface PredictGetPredict\n */\nexport interface PredictGetPredict {\n    /**\n     * El resultado de la predicción.\n     * @type {string}\n     * @memberof PredictGetPredict\n     */\n    'result': PredictGetPredictResultEnum;\n    /**\n     * El monto máximo posible para transferir.\n     * @type {number}\n     * @memberof PredictGetPredict\n     */\n    'max_amount': number;\n    /**\n     * Fecha de término para la restricción de monto en formato ISO-8601\n     * @type {string}\n     * @memberof PredictGetPredict\n     */\n    'cool_down_date': string;\n    /**\n     * Monto máximo para transferir a un nuevo destinatario.\n     * @type {number}\n     * @memberof PredictGetPredict\n     */\n    'new_destinatary_max_amount': number;\n}\n\nexport const PredictGetPredictResultEnum = {\n    Ok: 'ok',\n    NewDestinataryAmountExceeded: 'new_destinatary_amount_exceeded',\n    MaxAmountExceeded: 'max_amount_exceeded',\n    NewDestinataryCoolDown: 'new_destinatary_cool_down',\n    NotAvailableAccount: 'not_available_account'\n} as const;\n\nexport type PredictGetPredictResultEnum = typeof PredictGetPredictResultEnum[keyof typeof PredictGetPredictResultEnum];\n\n/**\n * Crear una nueva cuenta de cobro asociada a un integrador. Necesita datos de la cuenta de usuario asociada, datos de facturación y datos de contacto.\n * @export\n * @interface ReceiverPostReceiver\n */\nexport interface ReceiverPostReceiver {\n    /**\n     * Nombre de pila del administrador de la cuenta de cobro a crear.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'admin_first_name': string;\n    /**\n     * Apellido del administrador de la cuenta de cobro a crear.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'admin_last_name': string;\n    /**\n     * Correo electrónico del administrador de la cuenta de cobro a crear.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'admin_email': string;\n    /**\n     * Código alfanumérico de dos caracteres ISO 3166-1 del país de la cuenta de cobro a crear.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'country_code': string;\n    /**\n     * Identificador tributario del cobrador asociado a la cuenta de cobro a crear.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'business_identifier': string;\n    /**\n     * Categoría tributaria o rubro tributario del cobrador asociado a la cuenta de cobro a crear.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'business_category': string;\n    /**\n     * Nombre tributario del cobrador asociado a la cuenta de cobro a crear.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'business_name': string;\n    /**\n     * Teléfono del cobrador asociado a la cuenta de cobro a crear.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'business_phone': string;\n    /**\n     * Dirección del cobrador de la cuenta de cobro a crear.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'business_address_line_1': string;\n    /**\n     * Segunda línea de la dirección del cobrador de la cuenta de cobro a crear.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'business_address_line_2': string;\n    /**\n     * Tercera línea de la dirección del cobrador de la cuenta de cobro a crear.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'business_address_line_3': string;\n    /**\n     * Nombre del contacto del cobrador.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'contact_full_name': string;\n    /**\n     * Cargo del contacto del cobrador.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'contact_job_title': string;\n    /**\n     * Correo electrónico del contacto del cobrador.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'contact_email': string;\n    /**\n     * Teléfono del contacto del cobrador.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'contact_phone': string;\n    /**\n     * Identificador del banco.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'bank_account_bank_id'?: string;\n    /**\n     * Tipo de cuenta. Es obligatorio si se utiliza el modelo alternativo de integrador de confianza.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'bank_account_type'?: string;\n    /**\n     * Identificador personal del dueño de la cuenta de banco.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'bank_account_identifier'?: string;\n    /**\n     * Nombre de la cuenta de banco.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'bank_account_name'?: string;\n    /**\n     * Número de la cuenta en el banco.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'bank_account_number'?: string;\n    /**\n     * URL por omisión para el webservice donde se notificará el pago.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'notify_url'?: string;\n    /**\n     * URL para el webservice donde se notificará la rendición.\n     * @type {string}\n     * @memberof ReceiverPostReceiver\n     */\n    'rendition_url'?: string;\n}\n/**\n * Objeto para respuesta de creación de cuenta de cobro.\n * @export\n * @interface ReceiverPostReceiver2\n */\nexport interface ReceiverPostReceiver2 {\n    /**\n     * Identificador único de la cuenta de cobro.\n     * @type {string}\n     * @memberof ReceiverPostReceiver2\n     */\n    'receiver_id': string;\n    /**\n     * Llave secreta de la cuenta de cobro, se usa para firmar todas las peticiones.\n     * @type {string}\n     * @memberof ReceiverPostReceiver2\n     */\n    'secret': string;\n}\n/**\n * Objeto para respuestas exitosas de la API.\n * @export\n * @interface Success\n */\nexport interface Success {\n    /**\n     * Mensaje a desplegar al usuario.\n     * @type {string}\n     * @memberof Success\n     */\n    'message': string;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Borrar un pago. Solo se pueden borrar pagos que estén pendientes de pagar. Esta operación no puede deshacerse.\n         * @summary Delete payment by Id\n         * @param {string} id Identificador del pago\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePaymentById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deletePaymentById', 'id', id)\n            const localVarPath = `/v3/payments/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Api-Key required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Este método obtiene la lista de bancos que se pueden utilizar para pagar en esta cuenta de cobro.\n         * @summary Get banks\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBanks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v3/banks`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Api-Key required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Obtiene el listado de medios de pago disponible para una cuenta de cobrador.\n         * @summary Get payment methods\n         * @param {number} id Identificador de la cuenta de cobro\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMerchantPaymentMethodsById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMerchantPaymentMethodsById', 'id', id)\n            const localVarPath = `/v3/merchants/{id}/paymentMethods`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Api-Key required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Información completa del pago. Datos con los que fue creado y el estado actual del pago.\n         * @summary Get payment by Id\n         * @param {string} id Identificador del pago\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPaymentById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getPaymentById', 'id', id)\n            const localVarPath = `/v3/payments/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Api-Key required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Predicción acerca del resultado de un pago, si podrá o no funcionar. Información adicional como máximo posible de transferir a un nuevo destinatario.\n         * @summary Get payment prediction\n         * @param {string} payerEmail Correo electrónico del pagador\n         * @param {string} bankId Identificador del banco de origen\n         * @param {string} amount Monto del pago\n         * @param {string} currency Moneda en formato ISO-4217\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPredict: async (payerEmail: string, bankId: string, amount: string, currency: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'payerEmail' is not null or undefined\n            assertParamExists('getPredict', 'payerEmail', payerEmail)\n            // verify required parameter 'bankId' is not null or undefined\n            assertParamExists('getPredict', 'bankId', bankId)\n            // verify required parameter 'amount' is not null or undefined\n            assertParamExists('getPredict', 'amount', amount)\n            // verify required parameter 'currency' is not null or undefined\n            assertParamExists('getPredict', 'currency', currency)\n            const localVarPath = `/v3/predict`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Api-Key required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (payerEmail !== undefined) {\n                localVarQueryParameter['payer_email'] = payerEmail;\n            }\n\n            if (bankId !== undefined) {\n                localVarQueryParameter['bank_id'] = bankId;\n            }\n\n            if (amount !== undefined) {\n                localVarQueryParameter['amount'] = amount;\n            }\n\n            if (currency !== undefined) {\n                localVarQueryParameter['currency'] = currency;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Crea un pago en Khipu y obtiene las URLs para redirección al usuario para que complete el pago.\n         * @summary Create payment\n         * @param {PaymentPostPayment} [paymentPostPayment] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postPayment: async (paymentPostPayment?: PaymentPostPayment, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v3/payments`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Api-Key required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(paymentPostPayment, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Confirmar el pago. Al confirmar el pago, este será rendido al día hábil siguiente. \n         * @summary Confirm payment by Id\n         * @param {string} id Identificador del pago\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postPaymentConfirmById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('postPaymentConfirmById', 'id', id)\n            const localVarPath = `/v3/payments/{id}/confirm`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Api-Key required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Reembolsa total o parcialmente el monto de un pago. Esta operación solo se puede realizar en los comercios que recauden en cuenta Khipu y antes de la rendición de los fondos correspondientes.\n         * @summary Refund payment by Id\n         * @param {string} id Identificador del pago\n         * @param {PaymentPostPaymentRefunds} [paymentPostPaymentRefunds] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postPaymentRefundsById: async (id: string, paymentPostPaymentRefunds?: PaymentPostPaymentRefunds, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('postPaymentRefundsById', 'id', id)\n            const localVarPath = `/v3/payments/{id}/refunds`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Api-Key required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(paymentPostPaymentRefunds, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Crear una nueva cuenta de cobro asociada a un integrador. Necesita datos de la cuenta de usuario asociada, datos de facturación y datos de contacto. \n         * @summary Post receiver\n         * @param {ReceiverPostReceiver} [receiverPostReceiver] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postReceiver: async (receiverPostReceiver?: ReceiverPostReceiver, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v3/receivers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Api-Key required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(receiverPostReceiver, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Borrar un pago. Solo se pueden borrar pagos que estén pendientes de pagar. Esta operación no puede deshacerse.\n         * @summary Delete payment by Id\n         * @param {string} id Identificador del pago\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deletePaymentById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePaymentById(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deletePaymentById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Este método obtiene la lista de bancos que se pueden utilizar para pagar en esta cuenta de cobro.\n         * @summary Get banks\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBanks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankGetBanks>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBanks(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBanks']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Obtiene el listado de medios de pago disponible para una cuenta de cobrador.\n         * @summary Get payment methods\n         * @param {number} id Identificador de la cuenta de cobro\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMerchantPaymentMethodsById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantGetPaymentMethods>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMerchantPaymentMethodsById(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMerchantPaymentMethodsById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Información completa del pago. Datos con los que fue creado y el estado actual del pago.\n         * @summary Get payment by Id\n         * @param {string} id Identificador del pago\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPaymentById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentGetPayment>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentById(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPaymentById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Predicción acerca del resultado de un pago, si podrá o no funcionar. Información adicional como máximo posible de transferir a un nuevo destinatario.\n         * @summary Get payment prediction\n         * @param {string} payerEmail Correo electrónico del pagador\n         * @param {string} bankId Identificador del banco de origen\n         * @param {string} amount Monto del pago\n         * @param {string} currency Moneda en formato ISO-4217\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPredict(payerEmail: string, bankId: string, amount: string, currency: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PredictGetPredict>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPredict(payerEmail, bankId, amount, currency, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPredict']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Crea un pago en Khipu y obtiene las URLs para redirección al usuario para que complete el pago.\n         * @summary Create payment\n         * @param {PaymentPostPayment} [paymentPostPayment] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postPayment(paymentPostPayment?: PaymentPostPayment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentPostPayment2>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.postPayment(paymentPostPayment, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postPayment']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Confirmar el pago. Al confirmar el pago, este será rendido al día hábil siguiente. \n         * @summary Confirm payment by Id\n         * @param {string} id Identificador del pago\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postPaymentConfirmById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.postPaymentConfirmById(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postPaymentConfirmById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Reembolsa total o parcialmente el monto de un pago. Esta operación solo se puede realizar en los comercios que recauden en cuenta Khipu y antes de la rendición de los fondos correspondientes.\n         * @summary Refund payment by Id\n         * @param {string} id Identificador del pago\n         * @param {PaymentPostPaymentRefunds} [paymentPostPaymentRefunds] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postPaymentRefundsById(id: string, paymentPostPaymentRefunds?: PaymentPostPaymentRefunds, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.postPaymentRefundsById(id, paymentPostPaymentRefunds, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postPaymentRefundsById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Crear una nueva cuenta de cobro asociada a un integrador. Necesita datos de la cuenta de usuario asociada, datos de facturación y datos de contacto. \n         * @summary Post receiver\n         * @param {ReceiverPostReceiver} [receiverPostReceiver] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postReceiver(receiverPostReceiver?: ReceiverPostReceiver, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceiverPostReceiver2>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.postReceiver(receiverPostReceiver, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postReceiver']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * Borrar un pago. Solo se pueden borrar pagos que estén pendientes de pagar. Esta operación no puede deshacerse.\n         * @summary Delete payment by Id\n         * @param {string} id Identificador del pago\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePaymentById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Success> {\n            return localVarFp.deletePaymentById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Este método obtiene la lista de bancos que se pueden utilizar para pagar en esta cuenta de cobro.\n         * @summary Get banks\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBanks(options?: RawAxiosRequestConfig): AxiosPromise<BankGetBanks> {\n            return localVarFp.getBanks(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Obtiene el listado de medios de pago disponible para una cuenta de cobrador.\n         * @summary Get payment methods\n         * @param {number} id Identificador de la cuenta de cobro\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMerchantPaymentMethodsById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<MerchantGetPaymentMethods> {\n            return localVarFp.getMerchantPaymentMethodsById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Información completa del pago. Datos con los que fue creado y el estado actual del pago.\n         * @summary Get payment by Id\n         * @param {string} id Identificador del pago\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPaymentById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<PaymentGetPayment> {\n            return localVarFp.getPaymentById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Predicción acerca del resultado de un pago, si podrá o no funcionar. Información adicional como máximo posible de transferir a un nuevo destinatario.\n         * @summary Get payment prediction\n         * @param {string} payerEmail Correo electrónico del pagador\n         * @param {string} bankId Identificador del banco de origen\n         * @param {string} amount Monto del pago\n         * @param {string} currency Moneda en formato ISO-4217\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPredict(payerEmail: string, bankId: string, amount: string, currency: string, options?: RawAxiosRequestConfig): AxiosPromise<PredictGetPredict> {\n            return localVarFp.getPredict(payerEmail, bankId, amount, currency, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Crea un pago en Khipu y obtiene las URLs para redirección al usuario para que complete el pago.\n         * @summary Create payment\n         * @param {PaymentPostPayment} [paymentPostPayment] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postPayment(paymentPostPayment?: PaymentPostPayment, options?: RawAxiosRequestConfig): AxiosPromise<PaymentPostPayment2> {\n            return localVarFp.postPayment(paymentPostPayment, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Confirmar el pago. Al confirmar el pago, este será rendido al día hábil siguiente. \n         * @summary Confirm payment by Id\n         * @param {string} id Identificador del pago\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postPaymentConfirmById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Success> {\n            return localVarFp.postPaymentConfirmById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Reembolsa total o parcialmente el monto de un pago. Esta operación solo se puede realizar en los comercios que recauden en cuenta Khipu y antes de la rendición de los fondos correspondientes.\n         * @summary Refund payment by Id\n         * @param {string} id Identificador del pago\n         * @param {PaymentPostPaymentRefunds} [paymentPostPaymentRefunds] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postPaymentRefundsById(id: string, paymentPostPaymentRefunds?: PaymentPostPaymentRefunds, options?: RawAxiosRequestConfig): AxiosPromise<Success> {\n            return localVarFp.postPaymentRefundsById(id, paymentPostPaymentRefunds, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Crear una nueva cuenta de cobro asociada a un integrador. Necesita datos de la cuenta de usuario asociada, datos de facturación y datos de contacto. \n         * @summary Post receiver\n         * @param {ReceiverPostReceiver} [receiverPostReceiver] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postReceiver(receiverPostReceiver?: ReceiverPostReceiver, options?: RawAxiosRequestConfig): AxiosPromise<ReceiverPostReceiver2> {\n            return localVarFp.postReceiver(receiverPostReceiver, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * Borrar un pago. Solo se pueden borrar pagos que estén pendientes de pagar. Esta operación no puede deshacerse.\n     * @summary Delete payment by Id\n     * @param {string} id Identificador del pago\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deletePaymentById(id: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deletePaymentById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Este método obtiene la lista de bancos que se pueden utilizar para pagar en esta cuenta de cobro.\n     * @summary Get banks\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getBanks(options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getBanks(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Obtiene el listado de medios de pago disponible para una cuenta de cobrador.\n     * @summary Get payment methods\n     * @param {number} id Identificador de la cuenta de cobro\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMerchantPaymentMethodsById(id: number, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getMerchantPaymentMethodsById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Información completa del pago. Datos con los que fue creado y el estado actual del pago.\n     * @summary Get payment by Id\n     * @param {string} id Identificador del pago\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPaymentById(id: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getPaymentById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Predicción acerca del resultado de un pago, si podrá o no funcionar. Información adicional como máximo posible de transferir a un nuevo destinatario.\n     * @summary Get payment prediction\n     * @param {string} payerEmail Correo electrónico del pagador\n     * @param {string} bankId Identificador del banco de origen\n     * @param {string} amount Monto del pago\n     * @param {string} currency Moneda en formato ISO-4217\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPredict(payerEmail: string, bankId: string, amount: string, currency: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getPredict(payerEmail, bankId, amount, currency, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Crea un pago en Khipu y obtiene las URLs para redirección al usuario para que complete el pago.\n     * @summary Create payment\n     * @param {PaymentPostPayment} [paymentPostPayment] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public postPayment(paymentPostPayment?: PaymentPostPayment, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).postPayment(paymentPostPayment, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Confirmar el pago. Al confirmar el pago, este será rendido al día hábil siguiente. \n     * @summary Confirm payment by Id\n     * @param {string} id Identificador del pago\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public postPaymentConfirmById(id: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).postPaymentConfirmById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Reembolsa total o parcialmente el monto de un pago. Esta operación solo se puede realizar en los comercios que recauden en cuenta Khipu y antes de la rendición de los fondos correspondientes.\n     * @summary Refund payment by Id\n     * @param {string} id Identificador del pago\n     * @param {PaymentPostPaymentRefunds} [paymentPostPaymentRefunds] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public postPaymentRefundsById(id: string, paymentPostPaymentRefunds?: PaymentPostPaymentRefunds, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).postPaymentRefundsById(id, paymentPostPaymentRefunds, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Crear una nueva cuenta de cobro asociada a un integrador. Necesita datos de la cuenta de usuario asociada, datos de facturación y datos de contacto. \n     * @summary Post receiver\n     * @param {ReceiverPostReceiver} [receiverPostReceiver] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public postReceiver(receiverPostReceiver?: ReceiverPostReceiver, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).postReceiver(receiverPostReceiver, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n\n"]}