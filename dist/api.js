"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * API Pagos Instantáneos
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = exports.PredictGetPredictResultEnum = exports.PaymentPostPaymentCurrencyEnum = exports.PaymentGetPaymentFundsSourceEnum = exports.PaymentGetPaymentPaymentMethodEnum = exports.PaymentGetPaymentStatusDetailEnum = exports.PaymentGetPaymentStatusEnum = exports.BankGetBanksBanksInnerTypeEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
exports.BankGetBanksBanksInnerTypeEnum = {
    Persona: 'Persona',
    Empresa: 'Empresa'
};
exports.PaymentGetPaymentStatusEnum = {
    Pending: 'pending',
    Verifying: 'verifying',
    Done: 'done'
};
exports.PaymentGetPaymentStatusDetailEnum = {
    Pending: 'pending',
    Normal: 'normal',
    MarkedPaidByReceiver: 'marked-paid-by-receiver',
    RejectedByPayer: 'rejected-by-payer',
    MarkedAsAbuse: 'marked-as-abuse',
    Reversed: 'reversed'
};
exports.PaymentGetPaymentPaymentMethodEnum = {
    RegularTransfer: 'regular_transfer',
    SimplifiedTransfer: 'simplified_transfer',
    NotAvailable: 'not_available'
};
exports.PaymentGetPaymentFundsSourceEnum = {
    Debit: 'debit',
    Prepaid: 'prepaid',
    Credit: 'credit',
    NotAvailable: 'not-available',
    Empty: ''
};
exports.PaymentPostPaymentCurrencyEnum = {
    Clp: 'CLP',
    Clf: 'CLF',
    Ars: 'ARS',
    Pen: 'PEN',
    Mxn: 'MXN',
    Usd: 'USD',
    Eur: 'EUR',
    Bob: 'BOB',
    Cop: 'COP'
};
exports.PredictGetPredictResultEnum = {
    Ok: 'ok',
    NewDestinataryAmountExceeded: 'new_destinatary_amount_exceeded',
    MaxAmountExceeded: 'max_amount_exceeded',
    NewDestinataryCoolDown: 'new_destinatary_cool_down',
    NotAvailableAccount: 'not_available_account'
};
/**
 * DefaultApi - axios parameter creator
 * @export
 */
const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Borrar un pago. Solo se pueden borrar pagos que estén pendientes de pagar. Esta operación no puede deshacerse.
         * @summary Delete payment by Id
         * @param {string} id Identificador del pago
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePaymentById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deletePaymentById', 'id', id);
            const localVarPath = `/v3/payments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Api-Key required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Este método obtiene la lista de bancos que se pueden utilizar para pagar en esta cuenta de cobro.
         * @summary Get banks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBanks: async (options = {}) => {
            const localVarPath = `/v3/banks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Api-Key required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtiene el listado de medios de pago disponible para una cuenta de cobrador.
         * @summary Get payment methods
         * @param {number} id Identificador de la cuenta de cobro
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantPaymentMethodsById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getMerchantPaymentMethodsById', 'id', id);
            const localVarPath = `/v3/merchants/{id}/paymentMethods`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Api-Key required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Información completa del pago. Datos con los que fue creado y el estado actual del pago.
         * @summary Get payment by Id
         * @param {string} id Identificador del pago
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getPaymentById', 'id', id);
            const localVarPath = `/v3/payments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Api-Key required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Predicción acerca del resultado de un pago, si podrá o no funcionar. Información adicional como máximo posible de transferir a un nuevo destinatario.
         * @summary Get payment prediction
         * @param {string} payerEmail Correo electrónico del pagador
         * @param {string} bankId Identificador del banco de origen
         * @param {string} amount Monto del pago
         * @param {string} currency Moneda en formato ISO-4217
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPredict: async (payerEmail, bankId, amount, currency, options = {}) => {
            // verify required parameter 'payerEmail' is not null or undefined
            (0, common_1.assertParamExists)('getPredict', 'payerEmail', payerEmail);
            // verify required parameter 'bankId' is not null or undefined
            (0, common_1.assertParamExists)('getPredict', 'bankId', bankId);
            // verify required parameter 'amount' is not null or undefined
            (0, common_1.assertParamExists)('getPredict', 'amount', amount);
            // verify required parameter 'currency' is not null or undefined
            (0, common_1.assertParamExists)('getPredict', 'currency', currency);
            const localVarPath = `/v3/predict`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Api-Key required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (payerEmail !== undefined) {
                localVarQueryParameter['payer_email'] = payerEmail;
            }
            if (bankId !== undefined) {
                localVarQueryParameter['bank_id'] = bankId;
            }
            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crea un pago en Khipu y obtiene las URLs para redirección al usuario para que complete el pago.
         * @summary Create payment
         * @param {PaymentPostPayment} [paymentPostPayment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPayment: async (paymentPostPayment, options = {}) => {
            const localVarPath = `/v3/payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Api-Key required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(paymentPostPayment, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Confirmar el pago. Al confirmar el pago, este será rendido al día hábil siguiente.
         * @summary Confirm payment by Id
         * @param {string} id Identificador del pago
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentConfirmById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('postPaymentConfirmById', 'id', id);
            const localVarPath = `/v3/payments/{id}/confirm`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Api-Key required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reembolsa total o parcialmente el monto de un pago. Esta operación solo se puede realizar en los comercios que recauden en cuenta Khipu y antes de la rendición de los fondos correspondientes.
         * @summary Refund payment by Id
         * @param {string} id Identificador del pago
         * @param {PaymentPostPaymentRefunds} [paymentPostPaymentRefunds]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentRefundsById: async (id, paymentPostPaymentRefunds, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('postPaymentRefundsById', 'id', id);
            const localVarPath = `/v3/payments/{id}/refunds`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Api-Key required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(paymentPostPaymentRefunds, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Crear una nueva cuenta de cobro asociada a un integrador. Necesita datos de la cuenta de usuario asociada, datos de facturación y datos de contacto.
         * @summary Post receiver
         * @param {ReceiverPostReceiver} [receiverPostReceiver]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReceiver: async (receiverPostReceiver, options = {}) => {
            const localVarPath = `/v3/receivers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Api-Key required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(receiverPostReceiver, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DefaultApiAxiosParamCreator)(configuration);
    return {
        /**
         * Borrar un pago. Solo se pueden borrar pagos que estén pendientes de pagar. Esta operación no puede deshacerse.
         * @summary Delete payment by Id
         * @param {string} id Identificador del pago
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePaymentById(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePaymentById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.deletePaymentById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Este método obtiene la lista de bancos que se pueden utilizar para pagar en esta cuenta de cobro.
         * @summary Get banks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBanks(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBanks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.getBanks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Obtiene el listado de medios de pago disponible para una cuenta de cobrador.
         * @summary Get payment methods
         * @param {number} id Identificador de la cuenta de cobro
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMerchantPaymentMethodsById(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMerchantPaymentMethodsById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.getMerchantPaymentMethodsById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Información completa del pago. Datos con los que fue creado y el estado actual del pago.
         * @summary Get payment by Id
         * @param {string} id Identificador del pago
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentById(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.getPaymentById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Predicción acerca del resultado de un pago, si podrá o no funcionar. Información adicional como máximo posible de transferir a un nuevo destinatario.
         * @summary Get payment prediction
         * @param {string} payerEmail Correo electrónico del pagador
         * @param {string} bankId Identificador del banco de origen
         * @param {string} amount Monto del pago
         * @param {string} currency Moneda en formato ISO-4217
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPredict(payerEmail, bankId, amount, currency, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPredict(payerEmail, bankId, amount, currency, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.getPredict']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Crea un pago en Khipu y obtiene las URLs para redirección al usuario para que complete el pago.
         * @summary Create payment
         * @param {PaymentPostPayment} [paymentPostPayment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPayment(paymentPostPayment, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPayment(paymentPostPayment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.postPayment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Confirmar el pago. Al confirmar el pago, este será rendido al día hábil siguiente.
         * @summary Confirm payment by Id
         * @param {string} id Identificador del pago
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPaymentConfirmById(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPaymentConfirmById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.postPaymentConfirmById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reembolsa total o parcialmente el monto de un pago. Esta operación solo se puede realizar en los comercios que recauden en cuenta Khipu y antes de la rendición de los fondos correspondientes.
         * @summary Refund payment by Id
         * @param {string} id Identificador del pago
         * @param {PaymentPostPaymentRefunds} [paymentPostPaymentRefunds]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPaymentRefundsById(id, paymentPostPaymentRefunds, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPaymentRefundsById(id, paymentPostPaymentRefunds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.postPaymentRefundsById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Crear una nueva cuenta de cobro asociada a un integrador. Necesita datos de la cuenta de usuario asociada, datos de facturación y datos de contacto.
         * @summary Post receiver
         * @param {ReceiverPostReceiver} [receiverPostReceiver]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postReceiver(receiverPostReceiver, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postReceiver(receiverPostReceiver, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.postReceiver']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DefaultApiFp)(configuration);
    return {
        /**
         * Borrar un pago. Solo se pueden borrar pagos que estén pendientes de pagar. Esta operación no puede deshacerse.
         * @summary Delete payment by Id
         * @param {string} id Identificador del pago
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePaymentById(id, options) {
            return localVarFp.deletePaymentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Este método obtiene la lista de bancos que se pueden utilizar para pagar en esta cuenta de cobro.
         * @summary Get banks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBanks(options) {
            return localVarFp.getBanks(options).then((request) => request(axios, basePath));
        },
        /**
         * Obtiene el listado de medios de pago disponible para una cuenta de cobrador.
         * @summary Get payment methods
         * @param {number} id Identificador de la cuenta de cobro
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantPaymentMethodsById(id, options) {
            return localVarFp.getMerchantPaymentMethodsById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Información completa del pago. Datos con los que fue creado y el estado actual del pago.
         * @summary Get payment by Id
         * @param {string} id Identificador del pago
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentById(id, options) {
            return localVarFp.getPaymentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Predicción acerca del resultado de un pago, si podrá o no funcionar. Información adicional como máximo posible de transferir a un nuevo destinatario.
         * @summary Get payment prediction
         * @param {string} payerEmail Correo electrónico del pagador
         * @param {string} bankId Identificador del banco de origen
         * @param {string} amount Monto del pago
         * @param {string} currency Moneda en formato ISO-4217
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPredict(payerEmail, bankId, amount, currency, options) {
            return localVarFp.getPredict(payerEmail, bankId, amount, currency, options).then((request) => request(axios, basePath));
        },
        /**
         * Crea un pago en Khipu y obtiene las URLs para redirección al usuario para que complete el pago.
         * @summary Create payment
         * @param {PaymentPostPayment} [paymentPostPayment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPayment(paymentPostPayment, options) {
            return localVarFp.postPayment(paymentPostPayment, options).then((request) => request(axios, basePath));
        },
        /**
         * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Confirmar el pago. Al confirmar el pago, este será rendido al día hábil siguiente.
         * @summary Confirm payment by Id
         * @param {string} id Identificador del pago
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentConfirmById(id, options) {
            return localVarFp.postPaymentConfirmById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Reembolsa total o parcialmente el monto de un pago. Esta operación solo se puede realizar en los comercios que recauden en cuenta Khipu y antes de la rendición de los fondos correspondientes.
         * @summary Refund payment by Id
         * @param {string} id Identificador del pago
         * @param {PaymentPostPaymentRefunds} [paymentPostPaymentRefunds]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentRefundsById(id, paymentPostPaymentRefunds, options) {
            return localVarFp.postPaymentRefundsById(id, paymentPostPaymentRefunds, options).then((request) => request(axios, basePath));
        },
        /**
         * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Crear una nueva cuenta de cobro asociada a un integrador. Necesita datos de la cuenta de usuario asociada, datos de facturación y datos de contacto.
         * @summary Post receiver
         * @param {ReceiverPostReceiver} [receiverPostReceiver]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReceiver(receiverPostReceiver, options) {
            return localVarFp.postReceiver(receiverPostReceiver, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     * Borrar un pago. Solo se pueden borrar pagos que estén pendientes de pagar. Esta operación no puede deshacerse.
     * @summary Delete payment by Id
     * @param {string} id Identificador del pago
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deletePaymentById(id, options) {
        return (0, exports.DefaultApiFp)(this.configuration).deletePaymentById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Este método obtiene la lista de bancos que se pueden utilizar para pagar en esta cuenta de cobro.
     * @summary Get banks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBanks(options) {
        return (0, exports.DefaultApiFp)(this.configuration).getBanks(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Obtiene el listado de medios de pago disponible para una cuenta de cobrador.
     * @summary Get payment methods
     * @param {number} id Identificador de la cuenta de cobro
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getMerchantPaymentMethodsById(id, options) {
        return (0, exports.DefaultApiFp)(this.configuration).getMerchantPaymentMethodsById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Información completa del pago. Datos con los que fue creado y el estado actual del pago.
     * @summary Get payment by Id
     * @param {string} id Identificador del pago
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPaymentById(id, options) {
        return (0, exports.DefaultApiFp)(this.configuration).getPaymentById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Predicción acerca del resultado de un pago, si podrá o no funcionar. Información adicional como máximo posible de transferir a un nuevo destinatario.
     * @summary Get payment prediction
     * @param {string} payerEmail Correo electrónico del pagador
     * @param {string} bankId Identificador del banco de origen
     * @param {string} amount Monto del pago
     * @param {string} currency Moneda en formato ISO-4217
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPredict(payerEmail, bankId, amount, currency, options) {
        return (0, exports.DefaultApiFp)(this.configuration).getPredict(payerEmail, bankId, amount, currency, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Crea un pago en Khipu y obtiene las URLs para redirección al usuario para que complete el pago.
     * @summary Create payment
     * @param {PaymentPostPayment} [paymentPostPayment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    postPayment(paymentPostPayment, options) {
        return (0, exports.DefaultApiFp)(this.configuration).postPayment(paymentPostPayment, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Confirmar el pago. Al confirmar el pago, este será rendido al día hábil siguiente.
     * @summary Confirm payment by Id
     * @param {string} id Identificador del pago
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    postPaymentConfirmById(id, options) {
        return (0, exports.DefaultApiFp)(this.configuration).postPaymentConfirmById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Reembolsa total o parcialmente el monto de un pago. Esta operación solo se puede realizar en los comercios que recauden en cuenta Khipu y antes de la rendición de los fondos correspondientes.
     * @summary Refund payment by Id
     * @param {string} id Identificador del pago
     * @param {PaymentPostPaymentRefunds} [paymentPostPaymentRefunds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    postPaymentRefundsById(id, paymentPostPaymentRefunds, options) {
        return (0, exports.DefaultApiFp)(this.configuration).postPaymentRefundsById(id, paymentPostPaymentRefunds, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * **Advertencia: Esta función sólo está disponible para los clientes que la hayan contratado de forma independiente. Para utilizarla, póngase en contacto con nosotros en soporte@khipu.com**<br><br> Crear una nueva cuenta de cobro asociada a un integrador. Necesita datos de la cuenta de usuario asociada, datos de facturación y datos de contacto.
     * @summary Post receiver
     * @param {ReceiverPostReceiver} [receiverPostReceiver]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    postReceiver(receiverPostReceiver, options) {
        return (0, exports.DefaultApiFp)(this.configuration).postReceiver(receiverPostReceiver, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DefaultApi = DefaultApi;
//# sourceMappingURL=api.js.map